# -*- coding: utf-8 -*-
"""Tensor.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yvI9G1gBo2NpW0YzOvjtNYPlgtFWKvde
"""

import tensorflow as tf

# Step 1: Create a random tensor of shape (4, 6)
tensor = tf.random.uniform(shape=(4, 6), minval=0, maxval=10, dtype=tf.float32)

# Step 2: Find its rank and shape
rank = tf.rank(tensor)
shape = tensor.shape

# Print rank and shape before reshaping
print(f"Original Tensor:\n{tensor.numpy()}")
print(f"Rank: {rank.numpy()}, Shape: {shape}")

# Step 3: Reshape the tensor into (2, 3, 4)
reshaped_tensor = tf.reshape(tensor, (2, 3, 4))

# Transpose the reshaped tensor to (3, 2, 4)
transposed_tensor = tf.transpose(reshaped_tensor, perm=[1, 0, 2])

# Print rank and shape after reshaping/transposing
print(f"\nReshaped Tensor:\n{reshaped_tensor.numpy()}")
print(f"Shape after reshaping: {reshaped_tensor.shape}")

print(f"\nTransposed Tensor:\n{transposed_tensor.numpy()}")
print(f"Shape after transposing: {transposed_tensor.shape}")

# Step 4: Broadcasting a smaller tensor (1, 4) to match the larger tensor
small_tensor = tf.random.uniform(shape=(1, 4), minval=0, maxval=10, dtype=tf.float32)

# Broadcasting the smaller tensor to match the shape of reshaped_tensor
broadcasted_tensor = small_tensor + reshaped_tensor  # TensorFlow automatically expands dimensions

# Print the result of broadcasting
print(f"\nSmaller Tensor:\n{small_tensor.numpy()}")
print(f"\nBroadcasted Addition Result:\n{broadcasted_tensor.numpy()}")

# Step 5: Explanation of broadcasting
broadcasting_explanation = """
In TensorFlow, broadcasting allows smaller tensors to be expanded automatically to match
the shape of larger tensors in element-wise operations.

Example: A tensor of shape (1, 4) can be broadcasted to match a tensor of shape (2, 3, 4).
Here, the single row of the (1, 4) tensor is duplicated across the first two dimensions
to allow addition to the (2, 3, 4) tensor without explicit reshaping.
"""

print(broadcasting_explanation)